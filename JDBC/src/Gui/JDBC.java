/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import Database.facility.BeanBD;
import java.sql.*;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.DefaultComboBoxModel;
/**
 *
 * @author Vince
 */

public class JDBC extends javax.swing.JFrame {
    DefaultComboBoxModel dcbtablemodel = new DefaultComboBoxModel(), dcbchampmodel = new DefaultComboBoxModel(), dcbchampmodel2 = new DefaultComboBoxModel(); 
    
    BeanBD BD;
    boolean edit=false;
    /**
     * Creates new form JDBC
     */
    public JDBC() {
        
        initComponents();
        
        
        BD = new BeanBD();
        BD.setTypeBD("mysql");
        BD.connect();
        dcbtablemodel.addElement("voyageur");dcbtablemodel.addElement("activite");dcbtablemodel.addElement("chambre");dcbtablemodel.addElement("adresse");dcbtablemodel.addElement("reservation");
    }
    
    public void initializeTable(ResultSetMetaData rsmd) throws SQLException
    {
        String [] monVec= {};
         jTable1.setModel(new javax.swing.table.DefaultTableModel
                        (
                                new Object [][] {
                                },
                                monVec
                        ));
         
        int nbCol= rsmd.getColumnCount();
        //System.out.println("nbcol = "+nbCol);
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        for(int i=1;i<=nbCol;i++)
        {
            dtm.addColumn(rsmd.getColumnName(i));
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton_Execute = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox_table = new javax.swing.JComboBox<>();
        jComboBox_Choix = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBox_champ2 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jTF_ValeurAction = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jComboBox_champ = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_Operateur = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTF_Condition = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton_Execute.setText("Execute");
        jButton_Execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExecuteActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Action"));
        jPanel1.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Que voulez-vous faire :");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Sur quelle table :");

        jComboBox_table.setModel(dcbtablemodel);
        jComboBox_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_tableActionPerformed(evt);
            }
        });

        jComboBox_Choix.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Afficher tuples", "Afficher nombre de tuples", "Modifier tuple" }));
        jComboBox_Choix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ChoixActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("Modifier champ :");

        jComboBox_champ2.setModel(dcbchampmodel2);
        jComboBox_champ2.setEnabled(false);
        jComboBox_champ2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_champ2ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Valeur :");

        jTF_ValeurAction.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTF_ValeurAction, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(51, 51, 51)
                                .addComponent(jComboBox_champ2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox_Choix, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox_table, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox_Choix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox_table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_champ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jTF_ValeurAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Condition"));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Sur quel champ :");

        jCheckBox1.setText("Ajouter condtion");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jComboBox_champ.setModel(dcbchampmodel);
        jComboBox_champ.setEnabled(false);
        jComboBox_champ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_champActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Opérateur :");

        jComboBox_Operateur.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<", ">", "=", "<=", ">=" }));
        jComboBox_Operateur.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Valeur :");

        jTF_Condition.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_champ, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_Operateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(118, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTF_Condition, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox_champ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox_Operateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jTF_Condition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Quitter");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Instructions");

        jMenuItem2.setText("Liste des voyageurs inscrits à une activité à une date donnée");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Liste voyageurs sur une certaine période");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Age moyen des participants sur une certaine période");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton_Execute, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(124, 124, 124)))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_Execute, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExecuteActionPerformed
        try {
            //Préparation des statement
            ResultSetMetaData rsmd;
            PreparedStatement pStmt = null;
            ResultSet rs = null;
            //Récupération des différents champs dans la GUI
            int index = jComboBox_Choix.getSelectedIndex();
            switch(index)
            {
                case 0:
                    //Afficher tuples 
                    if(jCheckBox1.isSelected()==false)
                    {
                        //Si pas de condition
                        pStmt = BD.getCon().prepareStatement("select * from "+dcbtablemodel.getSelectedItem().toString());
 
                        System.out.println("prepared Statement = "+pStmt.toString());
                        rs = pStmt.executeQuery();
                    }
                    else
                    {
                        //Si condition
                        pStmt = BD.getCon().prepareStatement("select * from "+dcbtablemodel.getSelectedItem().toString());
                        rs = pStmt.executeQuery();
                        rsmd = rs.getMetaData();
                        String className = rsmd.getColumnClassName(jComboBox_champ.getSelectedIndex()+1);
                        pStmt = BD.getCon().prepareStatement("select * from "+dcbtablemodel.getSelectedItem().toString()+" where "+jComboBox_champ.getSelectedItem().toString()+" "+jComboBox_Operateur.getSelectedItem().toString()+" ?");
                        //Il faut savoir si c'est un string une date donc regarde la comboBox
                        
                        switch(className)
                        {
                        case "java.lang.Integer":
                            //int
                                pStmt.setInt(1, Integer.parseInt(jTF_Condition.getText()));
                            break;
                        case "java.lang.String":
                             //String
                                pStmt.setString(1, jTF_Condition.getText());
                            break;
                        case "java.lang.Long":
                                pStmt.setLong(1, Long.parseLong(jTF_Condition.getText()));
                            break;
                        case "java.lang.Float":
                            pStmt.setFloat(1, Float.parseFloat(jTF_Condition.getText()));
                            break;
                        case "java.lang.Boolean":
                            pStmt.setBoolean(1, Boolean.parseBoolean(jTF_Condition.getText()));
                            break;
                        case "java.sql.Date":
                            //Date
                                SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
                                java.util.Date date = sdf1.parse(jTF_Condition.getText());
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());  
                                pStmt.setDate(1, sqlDate);
                            break; 
                                
                        }
                        
                        
                        System.out.println("prepared Statement = "+pStmt.toString());
                        rs = pStmt.executeQuery();
                    }
                    break;
                case 1:
                    //Afficher nombre de tuples
                    pStmt = BD.getCon().prepareStatement("select count(*) from "+dcbtablemodel.getSelectedItem().toString());
                    rs = pStmt.executeQuery();
                    break;
                case 2:
                    //Modifier tuple
                    if(jCheckBox1.isSelected()==false)
                    {
                        JOptionPane.showMessageDialog(this, "Veuillez ajouter une condition");
                        break;
                    }
                    else
                    {
                        
                        //Si condition ajoutée mais ici il est obligé
                        pStmt = BD.getCon().prepareStatement("select * from "+dcbtablemodel.getSelectedItem().toString());
                        rs = pStmt.executeQuery();
                        rsmd = rs.getMetaData();
                        //Préparation de la prepared statement
                        pStmt = BD.getCon().prepareStatement("UPDATE "+jComboBox_table.getSelectedItem().toString()+" SET "+jComboBox_champ2.getSelectedItem().toString()+" = ?"
                                +" WHERE "+jComboBox_champ.getSelectedItem().toString()+" "+jComboBox_Operateur.getSelectedItem().toString()+" ?");
                        
                        //On ajoute la première valeur qui est la valeur située dans "action"

                        String className = rsmd.getColumnClassName(jComboBox_champ2.getSelectedIndex()+1); // +1 car getColumnClass commence à 1 et getSelectedIndex à 0
                        System.out.println(jComboBox_champ2.getSelectedItem().toString()+" =?= "+className);
                        switch(className)
                        {
                        case "java.lang.Integer":
                            //int
                            
                                pStmt.setInt(1, Integer.parseInt(jTF_ValeurAction.getText()));
                            break;
                        case "java.lang.String":
                             //String
                                pStmt.setString(1, jTF_ValeurAction.getText());
                            break;
                        case "java.lang.Long":
                                pStmt.setLong(1, Long.parseLong(jTF_ValeurAction.getText()));
                            break;
                        case "java.lang.Float":
                            pStmt.setFloat(1, Float.parseFloat(jTF_ValeurAction.getText()));
                            break;
                        case "java.lang.Boolean":
                            pStmt.setBoolean(1, Boolean.parseBoolean(jTF_ValeurAction.getText()));
                            break;
                        case "java.sql.Date":
                            //Date
                                SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
                                java.util.Date date = sdf1.parse(jTF_ValeurAction.getText());
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());  
                                pStmt.setDate(1, sqlDate);
                            break; 
                                
                        }
                        
                        
                        //On ajoute la deuxieme valeur qui est la condition
                        
                        className = rsmd.getColumnClassName(jComboBox_champ.getSelectedIndex()+1);
                        
                        //Il faut savoir si c'est un string une date donc regarde la comboBox
                        //System.out.println(jComboBox_champ.getSelectedItem().toString()+" =?= "+className);
                        switch(className)
                        {
                        case "java.lang.Integer":
                            //int
                            
                                pStmt.setInt(2, Integer.parseInt(jTF_Condition.getText()));
                            break;
                        case "java.lang.String":
                             //String
                                pStmt.setString(2, jTF_Condition.getText());
                            break;
                        case "java.lang.Long":
                                pStmt.setLong(2, Long.parseLong(jTF_Condition.getText()));
                            break;
                        case "java.lang.Float":
                            pStmt.setFloat(2, Float.parseFloat(jTF_Condition.getText()));
                            break;
                        case "java.lang.Boolean":
                            pStmt.setBoolean(2, Boolean.parseBoolean(jTF_Condition.getText()));
                            break;
                        case "java.sql.Date":
                            //Date
                                SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
                                java.util.Date date = sdf1.parse(jTF_Condition.getText());
                                java.sql.Date sqlDate = new java.sql.Date(date.getTime());  
                                pStmt.setDate(2, sqlDate);
                            break; 
                                
                        }
                         
                        //System.out.println("prepared Statement = "+pStmt.toString());
                        pStmt.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Champ bien modifié");
                    }
                    break;
            }
            
            
            
            
            rsmd = rs.getMetaData();
            initializeTable(rsmd);
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            
            while(rs.next())
            {
                Vector vec = new Vector();
                for(int i=1; i<=rsmd.getColumnCount();i++)
                {
                    System.out.println("Classe = "+rsmd.getColumnClassName(i));
                    
                    switch(rsmd.getColumnClassName(i))
                    {
                        case "java.lang.Integer":
                            //System.out.println("Integer "+rsmd.getColumnClassName(i));
                            int j =  rs.getInt(i);
                            
                            vec.add(j);
                            break;
                        case "java.lang.String":
                            //System.out.println("String "+rsmd.getColumnClassName(i));
                            String s =  rs.getString(i);
                            vec.add(s);
                            break;
                        case "java.lang.Long":
                            //System.out.println("String "+rsmd.getColumnClassName(i));
                            long l =  rs.getLong(i);
                            vec.add(l);
                            break;
                        case "java.lang.Float":
                            //System.out.println("String "+rsmd.getColumnClassName(i));
                            float fl =  rs.getFloat(i);
                            vec.add(fl);
                            break;
                        case "java.lang.Boolean":
                            //System.out.println("String "+rsmd.getColumnClassName(i));
                            boolean bool =  rs.getBoolean(i);
                            vec.add(bool);
                            break;
                        case "java.sql.Date":
                            Date date = rs.getDate(i);
                            //System.out.println(date);
                            vec.add(date);
                            break;
                        default:
                            vec.add("NULL");
                            break;
                    }
                }
                    dtm.addRow(vec);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(JDBC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erreur avec l'instruction : "+ex.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(JDBC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_ExecuteActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //jTF_Query.setText("Select * from ");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        //jTF_Query.setText("Select count(*) from ");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        //jTF_Query.setText("Update set ='' where = ''");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jComboBox_ChoixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ChoixActionPerformed
        if(jComboBox_Choix.getSelectedIndex()==2)
        {
            //Si on est sur modifier tuple il faut que l'utilisateur spécifie le champ qu'il veut changer
            jCheckBox1.setSelected(true);
            jComboBox_champ.setEnabled(true);
            jComboBox_Operateur.setEnabled(true);
            jTF_Condition.setEnabled(true); 
            jComboBox_champ2.setEnabled(true);
            jTF_ValeurAction.setEnabled(true);
        }
        else
        {
            jCheckBox1.setSelected(false);
            jComboBox_champ.setEnabled(false);
            jComboBox_Operateur.setEnabled(false);
            jTF_Condition.setEnabled(false); 
            jComboBox_champ2.setEnabled(false);
            jTF_ValeurAction.setEnabled(false);;
        }
    }//GEN-LAST:event_jComboBox_ChoixActionPerformed

    private void jComboBox_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_tableActionPerformed
        try {
            
            dcbchampmodel.removeAllElements();
            dcbchampmodel2.removeAllElements();
            ResultSet rs = BD.executeQuery("select * from "+dcbtablemodel.getSelectedItem().toString());
            rs.beforeFirst();
            ResultSetMetaData rsmd = rs.getMetaData();
            int nbCol= rsmd.getColumnCount();
            for(int i=1; i<= nbCol; i++)
            {
                dcbchampmodel.addElement(rsmd.getColumnName(i)); 
                dcbchampmodel2.addElement(rsmd.getColumnName(i)); 
            }
                
        } catch (SQLException ex) {
            Logger.getLogger(JDBC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox_tableActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
        {
            jComboBox_champ.setEnabled(true);
            jComboBox_Operateur.setEnabled(true);
            jTF_Condition.setEnabled(true);
        }
        else
        {
            jComboBox_champ.setEnabled(false);
            jComboBox_Operateur.setEnabled(false);
            jTF_Condition.setEnabled(false);   
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox_champActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_champActionPerformed
        
    }//GEN-LAST:event_jComboBox_champActionPerformed

    private void jComboBox_champ2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_champ2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_champ2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JDBC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Execute;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox_Choix;
    private javax.swing.JComboBox<String> jComboBox_Operateur;
    private javax.swing.JComboBox<String> jComboBox_champ;
    private javax.swing.JComboBox<String> jComboBox_champ2;
    private javax.swing.JComboBox<String> jComboBox_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTF_Condition;
    private javax.swing.JTextField jTF_ValeurAction;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
