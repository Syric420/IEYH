package GUI;

import HOLICOP.*;
import Message.*;
import java.io.*;
import java.net.*;
import java.util.Properties;
import javax.swing.JOptionPane;

public class Login extends javax.swing.JDialog
{
    private String adresse_TCP;
    private int port_TCP;
    
    private String username;
    private String adresse;
    private String personne;
    private int port;
    
    private Socket cliSock;
    private ObjectOutputStream oos = null;
    private ObjectInputStream ois = null;
    
    /**
     * Creates new form LoginClient
     */
    public Login(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        connectTcp();
    }
    
    public void connectTcp() 
    {
        FileInputStream fis = null;
        try
        {
            Properties prop = new Properties();
            fis = new FileInputStream("src\\GUI\\config.properties");

            prop.load(fis);
            
            String s;
            s = "PORT_TALK";
            System.out.println("PORT_TALK: " + prop.getProperty(s));
            port_TCP = Integer.parseInt(prop.getProperty(s));
            
            s = "ADRESSE_TCP";
            System.out.println("ADRESSE_TCP: " + prop.getProperty(s));
            adresse_TCP = prop.getProperty(s);
        }
        
        catch(IOException | NumberFormatException ex)
        {
            System.out.println("Serveur_Activites: Exception: " + ex.getMessage());
        }
        
        try
        {
            setCliSock(new Socket(adresse_TCP, port_TCP));
            System.out.println("Client connecté : " + getCliSock().getInetAddress().toString());
        }
        catch (UnknownHostException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Erreur ! Host non trouvé [" + e + "]");
        }
        catch (IOException e)
        { 
            JOptionPane.showMessageDialog(rootPane, "Erreur ! Pas de connexion ? [" + e + "]");
        }
        
        try
        {
            setOos(new ObjectOutputStream(getCliSock().getOutputStream()));
            setOis(new ObjectInputStream(getCliSock().getInputStream()));
            System.out.println("Flux créés");
        }
        catch (IOException e)
        { 
            JOptionPane.showMessageDialog(rootPane, "Erreur ! Pas de connexion ? [" + e + "]");
            System.exit(0); 
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        radioEmploye = new javax.swing.JRadioButton();
        radioVoyageur = new javax.swing.JRadioButton();
        fieldUsername = new javax.swing.JTextField();
        fieldReservation = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonOK = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fieldPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        buttonGroup1.add(radioEmploye);
        radioEmploye.setSelected(true);
        radioEmploye.setText("Employé");
        radioEmploye.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radioEmployeActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioVoyageur);
        radioVoyageur.setText("Voyageur");
        radioVoyageur.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radioVoyageurActionPerformed(evt);
            }
        });

        fieldUsername.setText("Mika");

        fieldReservation.setText("8142");
        fieldReservation.setEnabled(false);

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        jLabel3.setText("Num réservation:");

        buttonOK.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonOKActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Vous êtes?");

        fieldPassword.setText("1234");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(radioEmploye)
                                .addGap(47, 47, 47)
                                .addComponent(radioVoyageur)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldReservation)
                                    .addComponent(fieldUsername)
                                    .addComponent(fieldPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioEmploye)
                    .addComponent(radioVoyageur))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(buttonOK)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonOKActionPerformed
    {//GEN-HEADEREND:event_buttonOKActionPerformed

        MessageLogin message = new MessageLogin();
        Identify log = new Identify();
        
        if(radioVoyageur.isSelected()) //si voyageur on construit le message contenant la réservation saisie
        {
            message.setUsername(fieldReservation.getText());
            message.setTypeMessage(1);
        }
        
        else if(radioEmploye.isSelected())//si employé on construit le message contenant le username + le digest du mdp
        {
            message.setUsername(fieldUsername.getText());
            message.setTypeMessage(2);
            log.setLogin(fieldUsername.getText());
            log.setPassword(fieldPassword.getText());
            log.setMd();
            message.setMsgD(log);
        }
        
        try 
        {
            getOos().writeObject(message); //on envoi côté serveur
            MessageLogin response = (MessageLogin)getOis().readObject(); //on lit la réponse
            if(!response.getUsername().contains("NOT")) //si réponse positive
            {
                if(!response.getUsername().contains("PASSWORD")) //si concerne voyageur
                {
                    setUsername(response.getUsername() + " " + fieldReservation.getText());
                    setPort(response.getPort_chat());
                    setAdresse(response.getAddresse_chat());
                    setPersonne("Voyageur");
                    setVisible(false);
                }
                else if(response.getUsername().contains("PASSWORD")) //si concerne employé
                {
                    setUsername(fieldUsername.getText());
                    setPort(response.getPort_chat());
                    setAdresse(response.getAddresse_chat());
                    setPersonne("Employé");
                    setVisible(false);
                }
            }
            else
            {
                if(response.getUsername().contains("RESERVATION")) //si concerne voyageur
                    JOptionPane.showMessageDialog(rootPane, "Erreur: Le numéro de réservation est invalide");
                
                else if(response.getUsername().contains("PASSWORD")) //si concerne le mot de passe de l'employé
                    JOptionPane.showMessageDialog(rootPane, "Erreur: Le mot de passe est incorrect");
                
                else //si concerne le username de l'employé
                    JOptionPane.showMessageDialog(rootPane, "Erreur: Le username est inexistant");
            }
        }
        catch (IOException | ClassNotFoundException ex) 
        {
            JOptionPane.showMessageDialog(rootPane, "Login - Erreur: " + ex.getMessage());
        }
    }//GEN-LAST:event_buttonOKActionPerformed

    private void radioEmployeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioEmployeActionPerformed
    {//GEN-HEADEREND:event_radioEmployeActionPerformed
        if(radioEmploye.isSelected())
        {
            fieldUsername.setEnabled(true);
            fieldPassword.setEnabled(true);
            fieldReservation.setEnabled(false);
        }
        else
        {
            fieldUsername.setEnabled(false);
            fieldPassword.setEnabled(false);
            fieldReservation.setEnabled(true);
        }
    }//GEN-LAST:event_radioEmployeActionPerformed

    private void radioVoyageurActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioVoyageurActionPerformed
    {//GEN-HEADEREND:event_radioVoyageurActionPerformed
        if(radioEmploye.isSelected())
        {
            fieldUsername.setEnabled(true);
            fieldPassword.setEnabled(true);
            fieldReservation.setEnabled(false);
        }
        else
        {
            fieldUsername.setEnabled(false);
            fieldPassword.setEnabled(false);
            fieldReservation.setEnabled(true);
        }
    }//GEN-LAST:event_radioVoyageurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                Login dialog = new Login(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonOK;
    private javax.swing.JPasswordField fieldPassword;
    private javax.swing.JTextField fieldReservation;
    private javax.swing.JTextField fieldUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton radioEmploye;
    private javax.swing.JRadioButton radioVoyageur;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the username
     */
    public String getUsername()
    {
        return username;
    }

    /**
     * @param username the username to set
     */
    public void setUsername(String username)
    {
        this.username = username;
    }

    /**
     * @return the adresse
     */
    public String getAdresse()
    {
        return adresse;
    }

    /**
     * @param adresse the adresse to set
     */
    public void setAdresse(String adresse)
    {
        this.adresse = adresse;
    }

    /**
     * @return the port
     */
    public int getPort()
    {
        return port;
    }

    /**
     * @param port the port to set
     */
    public void setPort(int port)
    {
        this.port = port;
    }

    /**
     * @return the personne
     */
    public String getPersonne()
    {
        return personne;
    }

    /**
     * @param personne the personne to set
     */
    public void setPersonne(String personne)
    {
        this.personne = personne;
    }

    /**
     * @return the cliSock
     */
    public Socket getCliSock()
    {
        return cliSock;
    }

    /**
     * @param cliSock the cliSock to set
     */
    public void setCliSock(Socket cliSock)
    {
        this.cliSock = cliSock;
    }

    /**
     * @return the oos
     */
    public ObjectOutputStream getOos()
    {
        return oos;
    }

    /**
     * @param oos the oos to set
     */
    public void setOos(ObjectOutputStream oos)
    {
        this.oos = oos;
    }

    /**
     * @return the ois
     */
    public ObjectInputStream getOis()
    {
        return ois;
    }

    /**
     * @param ois the ois to set
     */
    public void setOis(ObjectInputStream ois)
    {
        this.ois = ois;
    }
}
